---
# Source: listener-operator/templates/configmap.yaml
apiVersion: v1
data:
  {}
kind: ConfigMap
metadata:
  name: listener-operator-configmap
  labels:
    app.kubernetes.io/name: listener-operator
    app.kubernetes.io/instance: listener-operator
    app.kubernetes.io/version: "23.11.0"
---
# Source: listener-operator/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: listener-operator-controller-deployment
  labels:
    app.kubernetes.io/name: listener-operator
    app.kubernetes.io/instance: listener-operator
    app.kubernetes.io/version: "23.11.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/role: controller
      app.kubernetes.io/name: listener-operator
      app.kubernetes.io/instance: listener-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/role: controller
        app.kubernetes.io/name: listener-operator
        app.kubernetes.io/instance: listener-operator
    spec:
      serviceAccountName: listener-operator-serviceaccount
      securityContext:
        {}
      containers:
        - name: listener-operator
          securityContext:
            runAsUser: 0
            seLinuxOptions:
              type: spc_t
          image: "docker.stackable.tech/stackable/listener-operator:23.11.0"
          imagePullPolicy: IfNotPresent
          resources:
            
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          args:
            - run
            - controller
          env:
            - name: CSI_ENDPOINT
              value: /csi/csi.sock
          volumeMounts:
            - name: csi
              mountPath: /csi
        - name: external-provisioner
          image: "docker.stackable.tech/k8s/sig-storage/csi-provisioner:v3.1.0"
          imagePullPolicy: IfNotPresent
          resources:
            
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          args:
            - --csi-address=/csi/csi.sock
            - --feature-gates=Topology=true
            - --extra-create-metadata
          volumeMounts:
            - name: csi
              mountPath: /csi
      volumes:
        - name: csi
          emptyDir: {}
---
# Source: listener-operator/templates/csidriver.yaml
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: listeners.stackable.tech
spec:
  attachRequired: false
  podInfoOnMount: true
  fsGroupPolicy: File
  volumeLifecycleModes:
    - Ephemeral
    - Persistent
---
# Source: listener-operator/templates/deployment.yaml
# Templated Deployment disabled for this operator
---
# Source: listener-operator/templates/listener-classes.yaml
apiVersion: listeners.stackable.tech/v1alpha1
kind: ListenerClass
metadata:
  name: cluster-internal
spec:
  serviceType: ClusterIP
---
# Source: listener-operator/templates/listener-classes.yaml
apiVersion: listeners.stackable.tech/v1alpha1
kind: ListenerClass
metadata:
  name: external-unstable
spec:
  serviceType: NodePort
---
# Source: listener-operator/templates/listener-classes.yaml
apiVersion: listeners.stackable.tech/v1alpha1
kind: ListenerClass
metadata:
  name: external-stable
spec:
  # To support environments that don't have LoadBalancer support, we fall back to using NodePort Services for "stable addresses".
  # To ensure that these addresses are actually stable, the Listener Operator will "bind" such Listeners to only run on the Node that
  # they were originally scheduled to (as controlled by the lifetime of the PersistentVolume). The downside here is that we prevent Kubernetes
  # from migrating that workload to a different Node (such as if it goes down).
  #
  # This is useful for cloud environments with no Cloud Controller Manager (or one which doesn't support LoadBalancers),
  # or on-premise environments that don't support external LoadBalancer peering (such as Calico (https://docs.tigera.io/calico/latest/networking/configuring/advertise-service-ips)
  # or MetalLB (https://metallb.org/)).
  serviceType: NodePort
---
# Source: listener-operator/templates/node-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: listener-operator-node-daemonset
  labels:
    app.kubernetes.io/name: listener-operator
    app.kubernetes.io/instance: listener-operator
    app.kubernetes.io/version: "23.11.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/role: node
      app.kubernetes.io/name: listener-operator
      app.kubernetes.io/instance: listener-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/role: node
        app.kubernetes.io/name: listener-operator
        app.kubernetes.io/instance: listener-operator
    spec:
      serviceAccountName: listener-operator-serviceaccount
      securityContext:
        {}
      containers:
        - name: listener-operator
          securityContext:
            runAsUser: 0
            seLinuxOptions:
              type: spc_t
          image: "docker.stackable.tech/stackable/listener-operator:23.11.0"
          imagePullPolicy: IfNotPresent
          resources:
            
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          args:
            - run
            - node
          env:
            - name: CSI_ENDPOINT
              value: /csi/csi.sock
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: csi
              mountPath: /csi
            - name: mountpoint
              mountPath: /var/lib/kubelet/pods
        - name: node-driver-registrar
          image: "docker.stackable.tech/k8s/sig-storage/csi-node-driver-registrar:v2.5.0"
          imagePullPolicy: IfNotPresent
          resources:
            
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          args:
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=/var/lib/kubelet/plugins/listeners.stackable.tech/csi.sock
          volumeMounts:
            - name: registration-sock
              mountPath: /registration
            - name: csi
              mountPath: /csi
      initContainers:
        # https://github.com/stackabletech/listener-operator/issues/76
        # In https://github.com/stackabletech/listener-operator/pull/45 we introduced a breaking change by shortening the CSI registration path
        # This resulted in the following error "node_register.go:43] file exists in socketPath /registration/listeners.stackable.tech-reg.sock but it's not a socket.: &{name:listeners.stackable.tech-reg.sock size:4096 mode:2147484141 modTime:{wall:984732078ext:63815759330 loc:0xf864a0} sys:{Dev:64769 Ino:43688551 Nlink:2 Mode:16877 Uid:0 Gid:0 X__pad0:0 Rdev:0 Size:4096 Blksize:4096 Blocks:8 Atim:{Sec:1680162505 Nsec:36073186} Mtim:{Sec:1680162530 Nsec:984732078} Ctim:{Sec:1680162530 Nsec:984732078} X__unused:[0 0 0]}}"
        # This init container removes the "old" directory, so that a unix socket with the same path can be created instead
        # TODO: Should be removed in a release after 23.4
        - name: migrate-longer-csi-registration-path
          image: "docker.stackable.tech/stackable/listener-operator:23.11.0"
          imagePullPolicy: IfNotPresent
          resources:
            
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          command:
            - /bin/bash
            - -euo
            - pipefail
            - -x
            - -c
            - |
              ls -la /registration
              echo "Removing old (long) CSI registration path"
              if [ -d "/registration/listeners.stackable.tech-reg.sock" ]; then rmdir /registration/listeners.stackable.tech-reg.sock; fi
              ls -la /registration
          volumeMounts:
            - name: registration-sock
              mountPath: /registration
          securityContext:
            runAsUser: 0
      volumes:
        - name: registration-sock
          hostPath:
            # node-driver-registrar appends a driver-unique filename to this path to avoid conflicts
            # see https://github.com/stackabletech/secret-operator/issues/229 for why this path should not be too long
            path: /var/lib/kubelet/plugins_registry
        - name: csi
          hostPath:
            path: /var/lib/kubelet/plugins/listeners.stackable.tech/
        - name: mountpoint
          hostPath:
            path: /var/lib/kubelet/pods/
---
# Source: listener-operator/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: listener-operator-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - services
    verbs:
      - get
      - list
      - watch
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - watch
      - create
      - delete
  - apiGroups:
      - ""
    resources:
      - nodes
      - persistentvolumeclaims
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - storage.k8s.io
    resources:
      - csinodes
      - storageclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - patch
  - apiGroups:
      - events.k8s.io
    resources:
      - events
    verbs:
      - create
  - apiGroups:
      - listeners.stackable.tech
    resources:
      - listenerclasses
      - listeners
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - listeners.stackable.tech
    resources:
      - listeners
      - listeners/status
      - podlisteners
    verbs:
      - patch
      - create
---
# Source: listener-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: listener-operator-serviceaccount
  labels:
    app.kubernetes.io/name: listener-operator
    app.kubernetes.io/instance: listener-operator
    app.kubernetes.io/version: "23.11.0"
---
# Source: listener-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: listener-operator-clusterrolebinding
  labels:
    app.kubernetes.io/name: listener-operator
    app.kubernetes.io/instance: listener-operator
    app.kubernetes.io/version: "23.11.0"
subjects:
  - kind: ServiceAccount
    name: listener-operator-serviceaccount
    namespace: default
roleRef:
  kind: ClusterRole
  name: listener-operator-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: listener-operator/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: listeners.stackable.tech
provisioner: listeners.stackable.tech
volumeBindingMode: WaitForFirstConsumer
